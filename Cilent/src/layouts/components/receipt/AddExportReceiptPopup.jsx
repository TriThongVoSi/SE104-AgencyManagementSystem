import React, { useState, useEffect, useContext } from 'react';
import { toast } from 'react-toastify';
import {
	FiX,
	FiPackage,
	FiCalendar,
	FiHash,
	FiPlus,
	FiTrash2,
	FiUser,
	FiDollarSign,
	FiEye,
} from 'react-icons/fi';
import { 
	formatCreateExportReceiptRequest,
	createMultipleExportReceipt
} from '../../../utils/exportReceiptService.js';
import { getAllProducts } from '../../../utils/receiptService';
import { getAllAgents } from '../../../utils/agentService';
import { ProductContext } from '../../../App';
import ErrorNotification from '../common/ErrorNotification';

const AddExportReceiptPopup = ({ onClose, onAdded }) => {
	const productContext = useContext(ProductContext);
	const [products, setProducts] = useState([]);
	const [agents, setAgents] = useState([]);

	const [loading, setLoading] = useState(true);
	const [submitting, setSubmitting] = useState(false);
	
	// State cho form ch√≠nh
	const [formData, setFormData] = useState({
		createDate: new Date().toISOString().split('T')[0],
		agentId: '',
		paidAmount: '',
	});
	
	// State cho danh s√°ch s·∫£n ph·∫©m ƒë∆∞·ª£c th√™m v√†o phi·∫øu xu·∫•t
	const [exportItems, setExportItems] = useState([]);
	
	// State cho form th√™m s·∫£n ph·∫©m m·ªõi
	const [currentItem, setCurrentItem] = useState({
		productID: '',
		quantityExport: '',
	});
	
	const [error, setError] = useState('');
	const [itemErrors, setItemErrors] = useState({});
	
	// State cho ErrorNotification
	const [showErrorNotification, setShowErrorNotification] = useState(false);
	const [errorNotificationData, setErrorNotificationData] = useState({
		title: '',
		message: '',
		productInfo: null,
		type: 'error',
		details: null
	});

	// Fetch products and agents when component mounts
	useEffect(() => {
		const fetchData = async () => {
			try {
				// Try to get products from context first
				if (productContext?.products && productContext.products.length > 0) {
					console.log('üîç Products from context:', productContext.products);
					setProducts(productContext.products);
				} else {
					const productsResult = await getAllProducts();
					console.log('üîç Products API response:', productsResult);
					if (productsResult.data && productsResult.data.length > 0) {
						console.log('üîç Products data structure (first item):', productsResult.data[0]);
						setProducts(productsResult.data);
					} else {
						console.warn('‚ö†Ô∏è No products data received from API');
						setProducts([]);
					}
				}

				// Load agents
				const agentsResult = await getAllAgents();
				console.log('üîç Agents API response:', agentsResult);
				if (agentsResult.status === 'success' && agentsResult.data && agentsResult.data.length > 0) {
					console.log('üîç Agents data structure (first item):', agentsResult.data[0]);
					setAgents(agentsResult.data);
				} else {
					console.warn('‚ö†Ô∏è No agents data received from API');
					setAgents([]);
				}

			} catch (err) {
				console.error('Error fetching data:', err);
				toast.error('L·ªói khi t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m v√† ƒë·∫°i l√Ω');
			} finally {
				setLoading(false);
			}
		};

		fetchData();
	}, [productContext]);

	// X·ª≠ l√Ω thay ƒë·ªïi input form ch√≠nh
	const handleFormChange = (e) => {
		const { name, value } = e.target;
		setFormData({ ...formData, [name]: value });
		setError('');
	};

	// X·ª≠ l√Ω thay ƒë·ªïi input item hi·ªán t·∫°i
	const handleItemChange = (e) => {
		const { name, value } = e.target;
		if (name === 'quantityExport' && value < 0) {
			setItemErrors(prev => ({ ...prev, quantityExport: 'S·ªë l∆∞·ª£ng xu·∫•t kh√¥ng ƒë∆∞·ª£c nh·ªè h∆°n 0' }));
		} else {
			setItemErrors(prev => ({ ...prev, [name]: '' }));
		}
		setCurrentItem({ ...currentItem, [name]: value });
		setError('');
	};

	// Validate item hi·ªán t·∫°i
	const validateCurrentItem = () => {
		const newErrors = {};

		if (!currentItem.productID) {
			newErrors.productID = 'Vui l√≤ng ch·ªçn s·∫£n ph·∫©m';
		} else {
			// Ki·ªÉm tra s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m ch∆∞a
			const existingItem = exportItems.find(item => item.productID === currentItem.productID);
			if (existingItem) {
				newErrors.productID = 'S·∫£n ph·∫©m n√†y ƒë√£ ƒë∆∞·ª£c th√™m v√†o phi·∫øu xu·∫•t';
			}
		}

		if (!currentItem.quantityExport) {
			newErrors.quantityExport = 'Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng';
		} else if (isNaN(currentItem.quantityExport) || parseInt(currentItem.quantityExport) <= 0) {
			newErrors.quantityExport = 'S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë d∆∞∆°ng';
		}

		setItemErrors(newErrors);
		return Object.keys(newErrors).length === 0;
	};

	// Th√™m s·∫£n ph·∫©m v√†o danh s√°ch
	const addItemToList = () => {
		if (!validateCurrentItem()) {
			return;
		}

		const product = products.find(p => (p.productId || p.productID || p.id) === parseInt(currentItem.productID));
		
		if (!product) {
			setItemErrors({ productID: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i' });
			return;
		}

		const exportPrice = product.exportPrice || product.export_price || 0;
		const newItem = {
			productID: currentItem.productID,
			product: product,
			quantityExport: parseInt(currentItem.quantityExport),
			exportPrice: exportPrice,
			totalPrice: exportPrice * parseInt(currentItem.quantityExport)
		};

		setExportItems(prev => [...prev, newItem]);
		
		// Reset form th√™m s·∫£n ph·∫©m
		setCurrentItem({
			productID: '',
			quantityExport: '',
		});
		setItemErrors({});
	};

	// X√≥a s·∫£n ph·∫©m kh·ªèi danh s√°ch
	const removeItemFromList = (productID) => {
		setExportItems(prev => prev.filter(item => item.productID !== productID));
	};

	// C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong danh s√°ch
	const updateItemQuantity = (productID, newQuantity) => {
		if (isNaN(newQuantity) || newQuantity <= 0) return;

		setExportItems(prev => prev.map(item => {
			if (item.productID === productID) {
				return {
					...item,
					quantityExport: parseInt(newQuantity),
					totalPrice: item.exportPrice * parseInt(newQuantity)
				};
			}
			return item;
		}));
	};

	// T√≠nh t·ªïng ti·ªÅn to√†n b·ªô phi·∫øu xu·∫•t
	const calculateTotalAmount = () => {
		return exportItems.reduce((total, item) => total + item.totalPrice, 0);
	};

	// Format currency
	const formatCurrency = (amount) => {
		return new Intl.NumberFormat('vi-VN', {
			style: 'currency',
			currency: 'VND'
		}).format(amount || 0);
	};

	// Get agent by ID
	const getAgentById = (agentId) => {
		return agents.find(a => (a.agentId || a.agentID) === parseInt(agentId));
	};

	// Parse inventory info from error message
	const parseInventoryError = (errorMessage) => {
		// Patterns for inventory errors
		const patterns = [
			/S·ªë l∆∞·ª£ng xu·∫•t \((\d+)\) v∆∞·ª£t qu√° t·ªìn kho \((\d+)\)/,
			/S·ªë l∆∞·ª£ng t·ªìn kho kh√¥ng ƒë·ªß.*?(\d+).*?(\d+)/,
			/kh√¥ng ƒë·ªß.*?y√™u c·∫ßu\s*(\d+).*?c√≥\s*(\d+)/,
			/inventory.*?requested\s*(\d+).*?available\s*(\d+)/i
		];

		for (const pattern of patterns) {
			const match = errorMessage.match(pattern);
			if (match) {
				return {
					requested: parseInt(match[1]),
					available: parseInt(match[2]),
					shortage: parseInt(match[1]) - parseInt(match[2])
				};
			}
		}
		return null;
	};

	// Find problematic product from error context
	const findProblematicProduct = (errorMessage) => {
		// Try to find product by name in error message or use first item
		for (const item of exportItems) {
			const productName = item.product.productName || item.product.name;
			if (errorMessage.includes(productName)) {
				return item;
			}
		}
		// Fallback to first item if no specific product found
		return exportItems.length > 0 ? exportItems[0] : null;
	};

	// Enhanced error handling for create operations
	const handleCreateError = (errorMessage) => {
		const isInventoryError = errorMessage.includes('t·ªìn kho') || 
								 errorMessage.includes('kh√¥ng ƒë·ªß') || 
								 errorMessage.includes('v∆∞·ª£t qu√°') ||
								 errorMessage.includes('insufficient') ||
								 errorMessage.includes('inventory');

		if (isInventoryError) {
			const inventoryInfo = parseInventoryError(errorMessage);
			const problematicProduct = findProblematicProduct(errorMessage);
			
			// Enhanced product info for inventory errors
			const productInfo = problematicProduct ? {
				name: problematicProduct.product.productName || problematicProduct.product.name,
				unit: problematicProduct.product.unit?.unitName || 'N/A',
				price: problematicProduct.exportPrice,
				requestedQuantity: problematicProduct.quantityExport,
				...(inventoryInfo && {
					availableQuantity: inventoryInfo.available,
					shortage: inventoryInfo.shortage
				})
			} : null;

			setErrorNotificationData({
				title: 'üì¶ T·ªìn kho kh√¥ng ƒë·ªß',
				message: errorMessage,
				productInfo: productInfo,
				type: 'warning',
				details: {
					suggestion: 'B·∫°n c√≥ th·ªÉ th·ª≠ c√°c gi·∫£i ph√°p sau:',
					solutions: [
						'‚Ä¢ Gi·∫£m s·ªë l∆∞·ª£ng xu·∫•t theo t·ªìn kho hi·ªán c√≥',
						'‚Ä¢ Ki·ªÉm tra l·∫°i t·ªìn kho sau khi nh·∫≠p h√†ng g·∫ßn ƒë√¢y',
						'‚Ä¢ T·∫°o phi·∫øu nh·∫≠p tr∆∞·ªõc khi xu·∫•t h√†ng',
						'‚Ä¢ Li√™n h·ªá kho ƒë·ªÉ c·∫≠p nh·∫≠t t·ªìn kho ch√≠nh x√°c'
					],
					...(inventoryInfo && {
						inventoryDetails: {
							requested: inventoryInfo.requested,
							available: inventoryInfo.available,
							shortage: inventoryInfo.shortage
						}
					})
				}
			});
		} else {
			// Other types of errors
			const firstProduct = exportItems.length > 0 && exportItems[0].product ? {
				name: exportItems[0].product.productName || exportItems[0].product.name,
				unit: exportItems[0].product.unit?.unitName || 'N/A',
				price: exportItems[0].exportPrice
			} : null;

			setErrorNotificationData({
				title: '‚ùå L·ªói t·∫°o phi·∫øu xu·∫•t',
				message: errorMessage,
				productInfo: firstProduct,
				type: 'error',
				details: {
					suggestion: 'Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin:',
					solutions: [
						'‚Ä¢ ƒê·∫£m b·∫£o t·∫•t c·∫£ th√¥ng tin ƒë·∫°i l√Ω ch√≠nh x√°c',
						'‚Ä¢ Ki·ªÉm tra s·ªë ti·ªÅn ƒë√£ tr·∫£ h·ª£p l·ªá',
						'‚Ä¢ X√°c nh·∫≠n t·∫•t c·∫£ s·∫£n ph·∫©m c√≥ trong h·ªá th·ªëng',
						'‚Ä¢ Th·ª≠ l·∫°i sau v√†i gi√¢y'
					],
					serverResponse: errorMessage
				}
			});
		}

		setShowErrorNotification(true);
	};

	// Handle action from error notification (e.g., auto-adjust quantity)
	const handleErrorNotificationAction = (action, value) => {
		if (action === 'adjust_quantity' && value !== undefined) {
			// Find the problematic product and adjust its quantity
			const problematicProduct = findProblematicProduct(errorNotificationData.message);
			if (problematicProduct) {
				updateItemQuantity(problematicProduct.productID, value);
				setShowErrorNotification(false);
				toast.success(`ƒê√£ ƒëi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng "${problematicProduct.product.productName}" v·ªÅ ${value}`, {
					autoClose: 3000
				});
			}
		} else {
			setShowErrorNotification(false);
		}
	};

	// X·ª≠ l√Ω submit
	const handleSubmit = async () => {
		if (exportItems.length === 0) {
			setError('Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m v√†o phi·∫øu xu·∫•t');
			return;
		}

		if (!formData.createDate) {
			setError('Vui l√≤ng ch·ªçn ng√†y xu·∫•t');
			return;
		}

		if (!formData.agentId) {
			setError('Vui l√≤ng ch·ªçn ƒë·∫°i l√Ω');
			return;
		}

		if (!formData.paidAmount) {
			setError('Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn ƒë√£ tr·∫£');
			return;
		}

		if (isNaN(formData.paidAmount) || parseFloat(formData.paidAmount) < 0) {
			setError('S·ªë ti·ªÅn ƒë√£ tr·∫£ ph·∫£i l√† s·ªë kh√¥ng √¢m');
			return;
		}

		setError('');
		setSubmitting(true);

		try {
			console.log('üîç Form data before parsing:', formData);
			console.log('üîç Export items:', exportItems);
			
			// S·ª≠ d·ª•ng helper function ƒë·ªÉ format request ƒë√∫ng
			const requestData = formatCreateExportReceiptRequest({
				date: formData.createDate,
				agentId: formData.agentId,
				paidAmount: formData.paidAmount,
				exportDetails: exportItems.map(item => ({
					productId: parseInt(item.productID),
					quantity: item.quantityExport
				}))
			});

			console.log('üì§ Sending request to API:', requestData);
			console.log('üîë Token exists:', !!localStorage.getItem('authToken'));

			const result = await createMultipleExportReceipt(requestData);

			console.log('üì• API Response:', result);

			if (result.success) {
				toast.success(result.message || 'T·∫°o phi·∫øu xu·∫•t h√†ng th√†nh c√¥ng!');
				onClose();
				onAdded();
			} else {
				// Handle specific error cases
				handleCreateError(result.message || result.error || 'C√≥ l·ªói khi t·∫°o phi·∫øu xu·∫•t h√†ng!');
			}
		} catch (err) {
			console.error('‚ùå API Error:', err);
			handleCreateError(err.message || 'C√≥ l·ªói khi t·∫°o phi·∫øu xu·∫•t h√†ng!');
		} finally {
			setSubmitting(false);
		}
	};

	// Show loading if data is still being fetched
	if (loading) {
		return (
			<div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50 backdrop-blur-sm">
				<div className="bg-white text-gray-800 p-8 rounded-2xl w-[500px] shadow-2xl">
					<div className="flex items-center justify-center py-8">
						<div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
						<span className="ml-3 text-gray-600">ƒêang t·∫£i d·ªØ li·ªáu...</span>
					</div>
				</div>
			</div>
		);
	}

	return (
		<div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50 backdrop-blur-sm">
			<div className="bg-white text-gray-800 p-6 rounded-2xl w-[900px] shadow-2xl transform transition-all duration-300 scale-100 hover:scale-[1.01] max-h-[90vh] overflow-y-auto">
				{/* Header */}
				<div className="flex justify-between items-center mb-6">
					<h2 className="text-2xl font-bold text-gray-800 flex items-center gap-2">
						<FiPackage className="text-blue-600" />
						Th√™m Phi·∫øu Xu·∫•t M·ªõi
					</h2>
					<button
						onClick={onClose}
						className="p-2 hover:bg-gray-100 rounded-full transition-colors duration-200"
						disabled={submitting}
					>
						<FiX className="text-gray-500 hover:text-gray-700 text-xl" />
					</button>
				</div>

				{/* Error Message */}
				{error && (
					<div className="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded-lg">
						{error}
					</div>
				)}

				{/* Form ch√≠nh */}
				<div className="space-y-6">
					{/* Create Date, Agent, Paid Amount */}
					<div className="grid grid-cols-1 md:grid-cols-3 gap-4">
						{/* Create Date */}
						<div className="relative">
							<label className="block text-sm font-medium text-gray-700 mb-1">
								Ng√†y xu·∫•t <span className="text-red-500">*</span>
							</label>
							<div className="relative">
								<div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
									<FiCalendar className="text-gray-400" />
								</div>
								<input
									type="date"
									name="createDate"
									value={formData.createDate}
									onChange={handleFormChange}
									className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 hover:border-gray-400"
									disabled={submitting}
								/>
							</div>
						</div>

						{/* Agent */}
						<div className="relative">
							<label className="block text-sm font-medium text-gray-700 mb-1">
								ƒê·∫°i l√Ω <span className="text-red-500">*</span>
							</label>
							<div className="relative">
								<div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
									<FiUser className="text-gray-400" />
								</div>
								<select
									name="agentId"
									value={formData.agentId}
									onChange={handleFormChange}
									className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 hover:border-gray-400"
									disabled={submitting}
								>
									<option value="">Ch·ªçn ƒë·∫°i l√Ω</option>
									{agents && agents.length > 0 ? agents.map((agent) => {
										const agentId = agent.agentId || agent.agentID || agent.id || agent.ID;
										const agentName = agent.agentName || agent.name || 'Unknown Agent';
										
										if (!agentId) {
											console.warn('‚ö†Ô∏è Agent missing ID:', agent);
											return null;
										}
										
										return (
											<option key={agentId} value={agentId}>
												{agentName} - {agent.phone || 'N/A'}
											</option>
										);
									}).filter(Boolean) : (
										<option disabled>ƒêang t·∫£i ƒë·∫°i l√Ω...</option>
									)}
								</select>
							</div>
						</div>

						{/* Paid Amount */}
						<div className="relative">
							<label className="block text-sm font-medium text-gray-700 mb-1">
								S·ªë ti·ªÅn ƒë√£ tr·∫£ <span className="text-red-500">*</span>
							</label>
							<div className="relative">
								<div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
									<FiDollarSign className="text-gray-400" />
								</div>
								<input
									type="number"
									name="paidAmount"
									placeholder="S·ªë ti·ªÅn ƒë√£ tr·∫£"
									value={formData.paidAmount}
									onChange={handleFormChange}
									min="0"
									step="1000"
									className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 hover:border-gray-400"
									disabled={submitting}
								/>
							</div>
						</div>
					</div>

					{/* Th√¥ng tin ƒë·∫°i l√Ω ƒëang ch·ªçn */}
					{formData.agentId && (
						<div className="bg-blue-50 p-4 rounded-lg">
							{(() => {
								const selectedAgent = getAgentById(formData.agentId);
								if (!selectedAgent) return null;
								
								return (
									<div>
										<h4 className="font-medium text-gray-900 mb-2 flex items-center gap-2">
											<FiUser className="text-blue-600" />
											Th√¥ng tin ƒë·∫°i l√Ω
										</h4>
										<div className="grid grid-cols-2 gap-4 text-sm">
											<div>
												<span className="text-gray-600">T√™n ƒë·∫°i l√Ω:</span>
												<span className="ml-2 font-medium">{selectedAgent.agentName}</span>
											</div>
											<div>
												<span className="text-gray-600">ƒêi·ªán tho·∫°i:</span>
												<span className="ml-2 font-medium">{selectedAgent.phone || 'N/A'}</span>
											</div>
											<div>
												<span className="text-gray-600">ƒê·ªãa ch·ªâ:</span>
												<span className="ml-2 font-medium">{selectedAgent.address || 'N/A'}</span>
											</div>
											<div>
												<span className="text-gray-600">C√¥ng n·ª£ hi·ªán t·∫°i:</span>
												<span className="ml-2 font-medium text-red-600">{formatCurrency(selectedAgent.debtMoney || 0)}</span>
											</div>
										</div>
									</div>
								);
							})()}
						</div>
					)}

					{/* Section th√™m s·∫£n ph·∫©m */}
					<div className="border border-gray-200 rounded-lg p-4">
						<h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
							<FiPlus className="text-green-600" />
							Th√™m s·∫£n ph·∫©m v√†o phi·∫øu xu·∫•t
						</h3>
						
						<div className="grid grid-cols-1 md:grid-cols-3 gap-4">
							{/* Product */}
							<div>
								<label className="block text-sm font-medium text-gray-700 mb-1">
									S·∫£n ph·∫©m <span className="text-red-500">*</span>
								</label>
								<div className="relative">
									<div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
										<FiPackage className="text-gray-400" />
									</div>
									<select
										name="productID"
										value={currentItem.productID}
										onChange={handleItemChange}
										className={`w-full pl-10 pr-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 hover:border-gray-400 ${
											itemErrors.productID ? 'border-red-500' : 'border-gray-300'
										}`}
										disabled={submitting}
									>
										<option value="">Ch·ªçn s·∫£n ph·∫©m</option>
										{products && products.length > 0 ? products.map((product) => {
											const productId = product.productId || product.productID || product.id || product.ID;
											const productName = product.productName || product.name || 'Unknown Product';
											const exportPrice = product.exportPrice || product.export_price || 0;
											
											if (!productId) {
												console.warn('‚ö†Ô∏è Product missing ID:', product);
												return null;
											}
											
											return (
												<option key={productId} value={productId}>
													{productName} - {formatCurrency(exportPrice)}
													{product.unit?.unitName && ` (${product.unit.unitName})`}
												</option>
											);
										}).filter(Boolean) : (
											<option disabled>ƒêang t·∫£i s·∫£n ph·∫©m...</option>
										)}
									</select>
								</div>
								{itemErrors.productID && (
									<p className="mt-1 text-sm text-red-600">{itemErrors.productID}</p>
								)}
							</div>

							{/* Quantity Export */}
							<div>
								<label className="block text-sm font-medium text-gray-700 mb-1">
									S·ªë l∆∞·ª£ng <span className="text-red-500">*</span>
								</label>
								<div className="relative">
									<div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
										<FiHash className="text-gray-400" />
									</div>
									<input
										type="number"
										name="quantityExport"
										placeholder="S·ªë l∆∞·ª£ng xu·∫•t"
										value={currentItem.quantityExport}
										onChange={handleItemChange}
										min="1"
										className={`w-full pl-10 pr-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 hover:border-gray-400 ${
											itemErrors.quantityExport ? 'border-red-500' : 'border-gray-300'
										}`}
										disabled={submitting}
									/>
								</div>
								{itemErrors.quantityExport && (
									<p className="mt-1 text-sm text-red-600">{itemErrors.quantityExport}</p>
								)}
							</div>

							{/* Add Button */}
							<div className="flex items-end">
								<button
									type="button"
									onClick={addItemToList}
									disabled={submitting}
									className="w-full px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-all duration-200 font-medium disabled:opacity-50 flex items-center justify-center gap-2"
								>
									<FiPlus />
									Th√™m
								</button>
							</div>
						</div>
					</div>

					{/* Danh s√°ch s·∫£n ph·∫©m ƒë√£ th√™m */}
					<div>
						<div className="flex justify-between items-center mb-4">
							<h3 className="text-lg font-medium text-gray-900">
								Danh s√°ch s·∫£n ph·∫©m ({exportItems.length})
							</h3>
							{exportItems.length > 0 && (
								<div className="text-lg font-bold text-blue-600">
									T·ªïng ti·ªÅn: {formatCurrency(calculateTotalAmount())}
								</div>
							)}
						</div>

						{exportItems.length === 0 ? (
							<div className="border-2 border-dashed border-gray-200 rounded-lg p-8 text-center">
								<FiPackage className="mx-auto h-12 w-12 text-gray-300 mb-4" />
								<p className="text-gray-500">Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c th√™m v√†o phi·∫øu xu·∫•t</p>
							</div>
						) : (
							<div className="border border-gray-200 rounded-lg overflow-hidden">
								<div className="max-h-60 overflow-y-auto">
									<table className="w-full">
										<thead className="bg-gray-50 sticky top-0">
											<tr>
												<th className="px-4 py-3 text-left text-sm font-medium text-gray-700">S·∫£n ph·∫©m</th>
												<th className="px-4 py-3 text-left text-sm font-medium text-gray-700">ƒê∆°n v·ªã</th>
												<th className="px-4 py-3 text-left text-sm font-medium text-gray-700">S·ªë l∆∞·ª£ng</th>
												<th className="px-4 py-3 text-left text-sm font-medium text-gray-700">ƒê∆°n gi√°</th>
												<th className="px-4 py-3 text-left text-sm font-medium text-gray-700">Th√†nh ti·ªÅn</th>
												<th className="px-4 py-3 text-left text-sm font-medium text-gray-700">Thao t√°c</th>
											</tr>
										</thead>
										<tbody className="divide-y divide-gray-200">
											{exportItems.map((item, index) => (
												<tr key={item.productID} className="hover:bg-gray-50">
													<td className="px-4 py-3">
														<div className="font-medium text-gray-900">
															{item.product.productName || item.product.name || 'Unknown Product'}
														</div>
													</td>
													<td className="px-4 py-3 text-sm text-gray-900">
														{item.product.unit?.unitName || 'N/A'}
													</td>
													<td className="px-4 py-3">
														<input
															type="number"
															value={item.quantityExport}
															onChange={(e) => updateItemQuantity(item.productID, e.target.value)}
															min="1"
															className="w-20 border border-gray-300 rounded px-2 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
															disabled={submitting}
														/>
													</td>
													<td className="px-4 py-3 text-sm text-gray-900">
														{formatCurrency(item.exportPrice)}
													</td>
													<td className="px-4 py-3 text-sm font-medium text-gray-900">
														{formatCurrency(item.totalPrice)}
													</td>
													<td className="px-4 py-3">
														<button
															type="button"
															onClick={() => removeItemFromList(item.productID)}
															disabled={submitting}
															className="text-red-600 hover:text-red-800 text-sm font-medium disabled:opacity-50 flex items-center gap-1"
														>
															<FiTrash2 />
															X√≥a
														</button>
													</td>
												</tr>
											))}
										</tbody>
									</table>
								</div>
							</div>
						)}
					</div>

					{/* Summary */}
					{exportItems.length > 0 && (
						<div className="bg-gray-50 p-4 rounded-lg">
							<div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
								<div className="flex justify-between">
									<span className="text-gray-600">T·ªïng ti·ªÅn h√†ng:</span>
									<span className="font-medium">{formatCurrency(calculateTotalAmount())}</span>
								</div>
								<div className="flex justify-between">
									<span className="text-gray-600">S·ªë ti·ªÅn ƒë√£ tr·∫£:</span>
									<span className="font-medium text-green-600">{formatCurrency(formData.paidAmount || 0)}</span>
								</div>
								<div className="flex justify-between">
									<span className="text-gray-600">C√≤n l·∫°i:</span>
									<span className="font-medium text-red-600">{formatCurrency(Math.max(0, calculateTotalAmount() - (parseFloat(formData.paidAmount) || 0)))}</span>
								</div>
							</div>
						</div>
					)}
				</div>

				{/* Buttons */}
				<div className="flex justify-end mt-8 space-x-3">
					<button
						onClick={onClose}
						disabled={submitting}
						className="px-6 py-3 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-all duration-200 font-medium border border-gray-300 disabled:opacity-50"
					>
						H·ªßy
					</button>
					<button
						onClick={handleSubmit}
						disabled={submitting || exportItems.length === 0}
						className="px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-200 font-medium shadow-lg hover:shadow-xl disabled:opacity-50 flex items-center gap-2"
					>
						{submitting && (
							<div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
						)}
						{submitting ? 'ƒêang t·∫°o...' : 'L∆∞u phi·∫øu xu·∫•t'}
					</button>
				</div>
			</div>
			
			{/* Error Notification */}
			<ErrorNotification
				isVisible={showErrorNotification}
				onClose={() => setShowErrorNotification(false)}
				title={errorNotificationData.title}
				message={errorNotificationData.message}
				type={errorNotificationData.type}
				productInfo={errorNotificationData.productInfo}
				details={errorNotificationData.details}
				onAction={handleErrorNotificationAction}
				actionText="ƒê√£ hi·ªÉu"
			/>
		</div>
	);
};

export default AddExportReceiptPopup;

// ·∫®n spinner c·ªßa input number tr√™n Chrome, Safari, Edge, Opera v√† Firefox
if (typeof window !== 'undefined') {
	const style = document.createElement('style');
	style.innerHTML = `
		input[type=number]::-webkit-inner-spin-button, 
		input[type=number]::-webkit-outer-spin-button {
			-webkit-appearance: none;
			margin: 0;
		}
		input[type=number] {
			-moz-appearance: textfield;
		}
	`;
	document.head.appendChild(style);
} 