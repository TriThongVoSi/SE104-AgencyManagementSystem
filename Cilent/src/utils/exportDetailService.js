import { API_CONFIG } from '../constants/api';

const API_BASE_URL = API_CONFIG.BASE_URL;

class ExportDetailService {
  // Helper method ƒë·ªÉ l·∫•y token v√† t·∫°o headers
  getAuthHeaders() {
    const token = localStorage.getItem('authToken') || localStorage.getItem('token');
    return {
      'Content-Type': 'application/json',
      'Authorization': token ? `Bearer ${token}` : '',
    };
  }

  // Helper method ƒë·ªÉ x·ª≠ l√Ω response
  async handleResponse(response) {
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      
      switch (response.status) {
        case 401:
          localStorage.removeItem('authToken');
          localStorage.removeItem('token');
          localStorage.removeItem('user');
          window.location.href = '/login';
          throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n');
        case 403:
          throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y');
        case 404:
          throw new Error('Kh√¥ng t√¨m th·∫•y chi ti·∫øt phi·∫øu xu·∫•t');
        case 400:
          throw new Error(errorData.message || 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá');
        case 500:
          throw new Error('L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau');
        default:
          throw new Error(errorData.message || 'C√≥ l·ªói x·∫£y ra');
      }
    }
    return await response.json();
  }

  // GET /api/export-details/by-receipt/{exportReceiptId} - L·∫•y chi ti·∫øt theo phi·∫øu xu·∫•t
  async getExportDetailsByReceiptId(exportReceiptId) {
    try {
      console.log('üîó Calling API:', `${API_BASE_URL}/export-details/by-receipt/${exportReceiptId}`);
      
      const response = await fetch(`${API_BASE_URL}/export-details/by-receipt/${exportReceiptId}`, {
        method: 'GET',
        headers: this.getAuthHeaders(),
      });
      
      console.log('üì° API Response status:', response.status);
      
      const result = await this.handleResponse(response);
      console.log('üìã API Response data:', result);
      
      return {
        success: true,
        data: result.data || result || [] // Handle both wrapped and direct response
      };
    } catch (error) {
      console.error('‚ùå Export Detail Service Error:', error);
      return {
        success: false,
        message: error.message || 'C√≥ l·ªói khi l·∫•y chi ti·∫øt phi·∫øu xu·∫•t',
        data: []
      };
    }
  }

  // PUT /api/export-details - C·∫≠p nh·∫≠t export detail
  async updateExportDetail(exportDetailData) {
    try {
      const response = await fetch(`${API_BASE_URL}/export-details`, {
        method: 'PUT',
        headers: this.getAuthHeaders(),
        body: JSON.stringify(exportDetailData),
      });
      
      const result = await this.handleResponse(response);
      return {
        success: true,
        data: result.data,
        message: result.message || 'C·∫≠p nh·∫≠t chi ti·∫øt th√†nh c√¥ng'
      };
    } catch (error) {
      console.error('Error updating export detail:', error);
      return {
        success: false,
        message: error.message || 'C√≥ l·ªói khi c·∫≠p nh·∫≠t chi ti·∫øt'
      };
    }
  }

  // GET /api/export-details/by-product/{productId} - L·∫•y chi ti·∫øt theo s·∫£n ph·∫©m
  async getExportDetailsByProductId(productId) {
    try {
      const response = await fetch(`${API_BASE_URL}/export-details/by-product/${productId}`, {
        method: 'GET',
        headers: this.getAuthHeaders(),
      });
      
      const result = await this.handleResponse(response);
      return result.data || [];
    } catch (error) {
      console.error('Error getting export details by product ID:', error);
      throw error;
    }
  }

  // GET /api/export-details/search - T√¨m chi ti·∫øt theo phi·∫øu xu·∫•t v√† s·∫£n ph·∫©m
  async searchExportDetail(exportReceiptId, productId) {
    try {
      const params = new URLSearchParams({
        exportReceiptId: exportReceiptId.toString(),
        productId: productId.toString()
      });
      
      const response = await fetch(`${API_BASE_URL}/export-details/search?${params}`, {
        method: 'GET',
        headers: this.getAuthHeaders(),
      });
      
      const result = await this.handleResponse(response);
      return result.data;
    } catch (error) {
      console.error('Error searching export detail:', error);
      throw error;
    }
  }

  // POST /api/export-details - T·∫°o chi ti·∫øt xu·∫•t m·ªõi
  async createExportDetail(exportDetailData) {
    try {
      const response = await fetch(`${API_BASE_URL}/export-details`, {
        method: 'POST',
        headers: this.getAuthHeaders(),
        body: JSON.stringify([exportDetailData]), // API expects array
      });
      
      const result = await this.handleResponse(response);
      return result.data;
    } catch (error) {
      console.error('Error creating export detail:', error);
      throw error;
    }
  }

  // POST /api/export-details - T·∫°o nhi·ªÅu chi ti·∫øt xu·∫•t c√πng l√∫c
  async createMultipleExportDetails(exportDetailsArray) {
    try {
      const response = await fetch(`${API_BASE_URL}/export-details`, {
        method: 'POST',
        headers: this.getAuthHeaders(),
        body: JSON.stringify(exportDetailsArray),
      });
      
      const result = await this.handleResponse(response);
      return result.data;
    } catch (error) {
      console.error('Error creating multiple export details:', error);
      throw error;
    }
  }
}

export default new ExportDetailService(); 