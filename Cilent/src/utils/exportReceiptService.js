import { API_CONFIG } from '../constants/api';

const API_BASE_URL = API_CONFIG.BASE_URL;

class ExportReceiptService {
  // Helper method ƒë·ªÉ l·∫•y token v√† t·∫°o headers
  getAuthHeaders() {
    const token = localStorage.getItem('authToken') || localStorage.getItem('token');
    return {
      'Content-Type': 'application/json',
      'Authorization': token ? `Bearer ${token}` : '',
    };
  }

  // Helper method ƒë·ªÉ x·ª≠ l√Ω response
  async handleResponse(response) {
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.log('üîç Error response data:', errorData);
      
      switch (response.status) {
        case 401:
          localStorage.removeItem('authToken');
          localStorage.removeItem('token');
          localStorage.removeItem('user');
          window.location.href = '/login';
          throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n');
        case 403:
          throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y');
        case 404:
          throw new Error(errorData.message || 'Kh√¥ng t√¨m th·∫•y phi·∫øu xu·∫•t h√†ng');
        case 400:
          throw new Error(errorData.message || 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá');
        case 500:
          throw new Error(errorData.message || 'L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau');
        default:
          throw new Error(errorData.message || 'C√≥ l·ªói x·∫£y ra');
      }
    }
    return await response.json();
  }

  // GET /api/export-receipts - L·∫•y t·∫•t c·∫£ phi·∫øu xu·∫•t
  async getAllExportReceipts() {
    try {
      const response = await fetch(`${API_BASE_URL}/export-receipts`, {
        method: 'GET',
        headers: this.getAuthHeaders(),
      });
      
      const result = await this.handleResponse(response);
      return result.data || [];
    } catch (error) {
      console.error('Error getting all export receipts:', error);
      throw error;
    }
  }

  // GET /api/export-receipts/{id} - L·∫•y phi·∫øu xu·∫•t theo ID
  async getExportReceiptById(id) {
    try {
      const response = await fetch(`${API_BASE_URL}/export-receipts/${id}`, {
        method: 'GET',
        headers: this.getAuthHeaders(),
      });
      
      const result = await this.handleResponse(response);
      return result.data;
    } catch (error) {
      console.error('Error getting export receipt by ID:', error);
      throw error;
    }
  }

  // GET /api/export-receipts/by-agent/{agentId} - L·∫•y phi·∫øu xu·∫•t theo ƒë·∫°i l√Ω
  async getExportReceiptsByAgent(agentId) {
    try {
      const response = await fetch(`${API_BASE_URL}/export-receipts/by-agent/${agentId}`, {
        method: 'GET',
        headers: this.getAuthHeaders(),
      });
      
      const result = await this.handleResponse(response);
      return result.data || [];
    } catch (error) {
      console.error('Error getting export receipts by agent:', error);
      throw error;
    }
  }

  // POST /api/export-receipts - T·∫°o phi·∫øu xu·∫•t m·ªõi
  async createExportReceipt(exportReceiptData) {
    try {
      console.log('üöÄ Sending export receipt data:', exportReceiptData);
      console.log('üîë Auth headers:', this.getAuthHeaders());
      
      // Determine which endpoint to use based on data structure
      let endpoint = 'export-receipts';
      if (exportReceiptData.exportDetails && Array.isArray(exportReceiptData.exportDetails)) {
        endpoint = 'export-receipts/multiple';
        console.log('üîÑ Using multiple products endpoint');
      }
      
      const response = await fetch(`${API_BASE_URL}/export-receipts`, {
        method: 'POST',
        headers: this.getAuthHeaders(),
        body: JSON.stringify(exportReceiptData),
      });
      
      console.log('üì° Response status:', response.status, response.statusText);
      
      const result = await this.handleResponse(response);
      return result.data;
    } catch (error) {
      console.error('Error creating export receipt:', error);
      throw error;
    }
  }

  // POST /api/export-receipts/legacy - T·∫°o phi·∫øu xu·∫•t (legacy method)
  async createExportReceiptLegacy(exportReceiptData) {
    try {
      const response = await fetch(`${API_BASE_URL}/export-receipts/legacy`, {
        method: 'POST',
        headers: this.getAuthHeaders(),
        body: JSON.stringify(exportReceiptData),
      });
      
      const result = await this.handleResponse(response);
      return result.data;
    } catch (error) {
      console.error('Error creating export receipt (legacy):', error);
      throw error;
    }
  }

  // PUT /api/export-receipts - C·∫≠p nh·∫≠t phi·∫øu xu·∫•t
  async updateExportReceipt(exportReceiptData) {
    try {
      const response = await fetch(`${API_BASE_URL}/export-receipts`, {
        method: 'PUT',
        headers: this.getAuthHeaders(),
        body: JSON.stringify(exportReceiptData),
      });
      
      const result = await this.handleResponse(response);
      return {
        success: true,
        data: result.data,
        message: result.message || 'C·∫≠p nh·∫≠t phi·∫øu xu·∫•t th√†nh c√¥ng'
      };
    } catch (error) {
      console.error('Error updating export receipt:', error);
      return {
        success: false,
        message: error.message || 'C√≥ l·ªói khi c·∫≠p nh·∫≠t phi·∫øu xu·∫•t',
        error: error.message
      };
    }
  }

  // PUT /api/export-receipts/with-details - C·∫≠p nh·∫≠t phi·∫øu xu·∫•t v·ªõi chi ti·∫øt
  async updateExportReceiptWithDetails(exportReceiptData) {
    try {
      console.log('üîÑ Updating export receipt with details:', exportReceiptData);
      
      const response = await fetch(`${API_BASE_URL}/export-receipts/with-details`, {
        method: 'PUT',
        headers: this.getAuthHeaders(),
        body: JSON.stringify(exportReceiptData),
      });
      
      const result = await this.handleResponse(response);
      return {
        success: true,
        data: result.data,
        message: result.message || 'C·∫≠p nh·∫≠t phi·∫øu xu·∫•t v√† chi ti·∫øt th√†nh c√¥ng'
      };
    } catch (error) {
      console.error('Error updating export receipt with details:', error);
      return {
        success: false,
        message: error.message || 'C√≥ l·ªói khi c·∫≠p nh·∫≠t phi·∫øu xu·∫•t',
        error: error.message,
        validationErrors: error.validationErrors || {}
      };
    }
  }

  // DELETE /api/export-receipts/{id} - X√≥a phi·∫øu xu·∫•t
  async deleteExportReceipt(id) {
    try {
      const response = await fetch(`${API_BASE_URL}/export-receipts/${id}`, {
        method: 'DELETE',
        headers: this.getAuthHeaders(),
      });
      
      const result = await this.handleResponse(response);
      return result.data;
    } catch (error) {
      console.error('Error deleting export receipt:', error);
      throw error;
    }
  }

  // GET /api/export-receipts/{id}/total-amount - T√≠nh t·ªïng ti·ªÅn phi·∫øu xu·∫•t
  async calculateTotalAmount(id) {
    try {
      const response = await fetch(`${API_BASE_URL}/export-receipts/${id}/total-amount`, {
        method: 'GET',
        headers: this.getAuthHeaders(),
      });
      
      const result = await this.handleResponse(response);
      return result.data;
    } catch (error) {
      console.error('Error calculating total amount:', error);
      throw error;
    }
  }
}

export default new ExportReceiptService();

/**
 * Helper function ƒë·ªÉ format request t·∫°o phi·∫øu xu·∫•t h√†ng
 * @param {Object} data - D·ªØ li·ªáu form
 * @param {string} data.date - Ng√†y t·∫°o phi·∫øu
 * @param {number} data.agentId - ID ƒë·∫°i l√Ω
 * @param {number} data.paidAmount - S·ªë ti·ªÅn ƒë√£ tr·∫£
 * @param {Array} data.exportDetails - Danh s√°ch chi ti·∫øt xu·∫•t h√†ng
 * @returns {Object} Request data formatted cho API
 */
export const formatCreateExportReceiptRequest = (data) => {
  return {
    createDate: data.date,
    agentId: parseInt(data.agentId),
    paidAmount: parseFloat(data.paidAmount) || 0,
    exportDetails: data.exportDetails.map(detail => ({
      productID: parseInt(detail.productId),
      quantityExport: parseInt(detail.quantity)
    }))
  };
};

/**
 * Function t·∫°o phi·∫øu xu·∫•t h√†ng v·ªõi nhi·ªÅu s·∫£n ph·∫©m
 * @param {Object} requestData - Request data ƒë√£ ƒë∆∞·ª£c format
 * @returns {Promise<Object>} Response v·ªõi success/error status
 */
export const createMultipleExportReceipt = async (requestData) => {
  try {
    console.log('üöÄ Creating export receipt with data:', requestData);
    
    // Import the default export
    const exportReceiptService = (await import('./exportReceiptService.js')).default;
    const result = await exportReceiptService.createExportReceipt(requestData);
    
    return {
      success: true,
      data: result,
      message: 'T·∫°o phi·∫øu xu·∫•t h√†ng th√†nh c√¥ng!'
    };
  } catch (error) {
    console.error('‚ùå Error creating export receipt:', error);
    return {
      success: false,
      message: error.message || 'C√≥ l·ªói khi t·∫°o phi·∫øu xu·∫•t h√†ng',
      error: error.message
    };
  }
}; 