import api from './api.js';
import { API_CONFIG } from '../constants/api.js';

/**
 * Import Receipt Service
 * T∆∞∆°ng ·ª©ng v·ªõi ImportReceiptController.java
 * 
 * Backend Endpoints:
 * - GET / - L·∫•y t·∫•t c·∫£ phi·∫øu nh·∫≠p h√†ng
 * - GET /{id} - L·∫•y phi·∫øu nh·∫≠p theo ID  
 * - GET /by-date/{date} - L·∫•y phi·∫øu nh·∫≠p theo ng√†y
 * - POST / - T·∫°o phi·∫øu nh·∫≠p m·ªõi (CreateImportReceiptRequest)
 * - PUT / - C·∫≠p nh·∫≠t phi·∫øu nh·∫≠p (ImportReceipt)
 * - PUT /quantity - C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng (UpdateImportReceiptRequest)
 * 
 * Authentication: Bearer Token required
 * Roles: ADMIN, WAREHOUSE_ACCOUNTANT (read/write), VIEWER (read only)
 */

/**
 * L·∫•y t·∫•t c·∫£ phi·∫øu nh·∫≠p h√†ng
 * @returns {Promise<Object>} - ApiResponse ch·ª©a danh s√°ch t·∫•t c·∫£ phi·∫øu nh·∫≠p
 */
export const getAllImportReceipts = async () => {
  try {
    const response = await api.get(API_CONFIG.ENDPOINTS.IMPORT_RECEIPTS.BASE);
    return {
      success: true,
      data: response.data.data || [],
      message: response.data.message,
      code: response.data.code
    };
  } catch (error) {
    console.error('L·ªói getAllImportReceipts:', error);
    
    // Handle specific error cases
    if (error.response?.status === 403) {
      return {
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch phi·∫øu nh·∫≠p h√†ng',
        error: error.response.data
      };
    }

    if (error.response?.status === 404) {
      return {
        success: true,
        data: [],
        message: 'Kh√¥ng c√≥ phi·∫øu nh·∫≠p h√†ng n√†o',
        code: 404
      };
    }

    return {
      success: false,
      data: [],
      message: error.response?.data?.message || 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch phi·∫øu nh·∫≠p h√†ng',
      error: error.response?.data || error.message
    };
  }
};

/**
 * L·∫•y phi·∫øu nh·∫≠p theo ID
 * @param {number} id - ID phi·∫øu nh·∫≠p h√†ng
 * @returns {Promise<Object>} - ApiResponse ch·ª©a th√¥ng tin phi·∫øu nh·∫≠p
 */
export const getImportReceiptById = async (id) => {
  try {
    const response = await api.get(`${API_CONFIG.ENDPOINTS.IMPORT_RECEIPTS.GET_BY_ID}/${id}`);
    return {
      success: true,
      data: response.data.data,
      message: response.data.message,
      code: response.data.code
    };
  } catch (error) {
    console.error('L·ªói getImportReceiptById:', error);
    return {
      success: false,
      message: error.response?.data?.message || 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin phi·∫øu nh·∫≠p',
      error: error.response?.data || error.message
    };
  }
};

/**
 * L·∫•y danh s√°ch phi·∫øu nh·∫≠p theo ng√†y
 * @param {string} date - Ng√†y nh·∫≠p h√†ng (YYYY-MM-DD)
 * @returns {Promise<Object>} - ApiResponse ch·ª©a danh s√°ch phi·∫øu nh·∫≠p
 */
export const getImportReceiptsByDate = async (date) => {
  try {
    console.log('üîç Calling API:', `${API_CONFIG.ENDPOINTS.IMPORT_RECEIPTS.GET_BY_DATE}/${date}`);
    console.log('üîë Auth token exists:', !!localStorage.getItem('authToken'));
    
    const response = await api.get(`${API_CONFIG.ENDPOINTS.IMPORT_RECEIPTS.GET_BY_DATE}/${date}`);
    
    console.log('‚úÖ API Response:', response);
    console.log('üì¶ Response data:', response.data);
    
    return {
      success: true,
      data: response.data.data || [],
      message: response.data.message,
      code: response.data.code
    };
  } catch (error) {
    console.error('‚ùå Error getImportReceiptsByDate:', error);
    console.error('üìÑ Error response:', error.response);
    console.error('üíæ Error response data:', error.response?.data);
    
    return {
      success: false,
      data: [],
      message: error.response?.data?.message || 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch phi·∫øu nh·∫≠p',
      error: error.response?.data || error.message
    };
  }
};

/**
 * T·∫°o phi·∫øu nh·∫≠p h√†ng m·ªõi
 * @param {Object} createRequest - CreateImportReceiptRequest
 * @param {string} createRequest.createDate - Ng√†y t·∫°o phi·∫øu nh·∫≠p
 * @param {number} createRequest.productID - ID s·∫£n ph·∫©m
 * @param {number} createRequest.quantityImport - S·ªë l∆∞·ª£ng nh·∫≠p
 * @returns {Promise<Object>} - ApiResponse ch·ª©a phi·∫øu nh·∫≠p ƒë√£ t·∫°o
 */
export const createImportReceipt = async (createRequest) => {
  try {
    // Validate input - h·ªó tr·ª£ c·∫£ single v√† multiple products
    if (!createRequest) {
      throw new Error('Th√¥ng tin t·∫°o phi·∫øu nh·∫≠p kh√¥ng ƒë·∫ßy ƒë·ªß');
    }
    
    // Ki·ªÉm tra n·∫øu l√† multiple products
    if (createRequest.importDetails && Array.isArray(createRequest.importDetails)) {
      if (createRequest.importDetails.length === 0) {
        throw new Error('Danh s√°ch s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
      }
      // Validate t·ª´ng item
      for (const item of createRequest.importDetails) {
        if (!item.productID || !item.quantityImport) {
          throw new Error('Th√¥ng tin s·∫£n ph·∫©m kh√¥ng ƒë·∫ßy ƒë·ªß');
        }
      }
    } else {
      // Validate cho single product (backward compatibility)
      if (!createRequest.productID || !createRequest.quantityImport) {
        throw new Error('Th√¥ng tin t·∫°o phi·∫øu nh·∫≠p kh√¥ng ƒë·∫ßy ƒë·ªß');
      }
    }

    const response = await api.post(API_CONFIG.ENDPOINTS.IMPORT_RECEIPTS.CREATE, createRequest);
    return {
      success: true,
      data: response.data.data,
      message: response.data.message,
      code: response.data.code
    };
  } catch (error) {
    console.error('L·ªói createImportReceipt:', error);
    
    // Handle validation errors
    if (error.response?.status === 400) {
      return {
        success: false,
        message: error.response.data?.message || 'D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá',
        error: error.response.data,
        validationErrors: error.response.data?.errors
      };
    }

    // Handle forbidden access
    if (error.response?.status === 403) {
      return {
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o phi·∫øu nh·∫≠p h√†ng',
        error: error.response.data
      };
    }

    return {
      success: false,
      message: error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫°o phi·∫øu nh·∫≠p h√†ng',
      error: error.response?.data || error.message
    };
  }
};

/**
 * C·∫≠p nh·∫≠t th√¥ng tin phi·∫øu nh·∫≠p h√†ng
 * @param {Object} importReceipt - ImportReceipt object
 * @param {number} importReceipt.importReceiptId - ID phi·∫øu nh·∫≠p
 * @param {string} importReceipt.createDate - Ng√†y t·∫°o
 * @param {number} importReceipt.totalAmount - T·ªïng ti·ªÅn
 * @returns {Promise<Object>} - ApiResponse ch·ª©a phi·∫øu nh·∫≠p ƒë√£ c·∫≠p nh·∫≠t
 */
export const updateImportReceipt = async (importReceipt) => {
  try {
    if (!importReceipt || !importReceipt.importReceiptId) {
      throw new Error('ID phi·∫øu nh·∫≠p kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
    }

    const response = await api.put(API_CONFIG.ENDPOINTS.IMPORT_RECEIPTS.UPDATE, importReceipt);
    return {
      success: true,
      data: response.data.data,
      message: response.data.message,
      code: response.data.code
    };
  } catch (error) {
    console.error('L·ªói updateImportReceipt:', error);
    
    if (error.response?.status === 404) {
      return {
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y phi·∫øu nh·∫≠p c·∫ßn c·∫≠p nh·∫≠t',
        error: error.response.data
      };
    }

    if (error.response?.status === 403) {
      return {
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t phi·∫øu nh·∫≠p h√†ng',
        error: error.response.data
      };
    }

    return {
      success: false,
      message: error.response?.data?.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t phi·∫øu nh·∫≠p h√†ng',
      error: error.response?.data || error.message
    };
  }
};

/**
 * C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng nh·∫≠p c·ªßa phi·∫øu nh·∫≠p h√†ng
 * @param {Object} updateRequest - UpdateImportReceiptRequest
 * @param {number} updateRequest.importReceiptId - ID phi·∫øu nh·∫≠p
 * @param {number} updateRequest.quantityImport - S·ªë l∆∞·ª£ng nh·∫≠p m·ªõi
 * @returns {Promise<Object>} - ApiResponse ch·ª©a phi·∫øu nh·∫≠p ƒë√£ c·∫≠p nh·∫≠t
 */
export const updateImportReceiptQuantity = async (updateRequest) => {
  try {
    if (!updateRequest || !updateRequest.importReceiptId || !updateRequest.quantityImport) {
      throw new Error('Th√¥ng tin c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng kh√¥ng ƒë·∫ßy ƒë·ªß');
    }

    const response = await api.put(API_CONFIG.ENDPOINTS.IMPORT_RECEIPTS.UPDATE_QUANTITY, updateRequest);
    return {
      success: true,
      data: response.data.data,
      message: response.data.message,
      code: response.data.code
    };
  } catch (error) {
    console.error('L·ªói updateImportReceiptQuantity:', error);
    
    if (error.response?.status === 404) {
      return {
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y phi·∫øu nh·∫≠p c·∫ßn c·∫≠p nh·∫≠t',
        error: error.response.data
      };
    }

    if (error.response?.status === 403) {
      return {
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng phi·∫øu nh·∫≠p',
        error: error.response.data
      };
    }

    return {
      success: false,
      message: error.response?.data?.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng phi·∫øu nh·∫≠p',
      error: error.response?.data || error.message
    };
  }
};

/**
 * X√≥a phi·∫øu nh·∫≠p h√†ng (n·∫øu backend c√≥ implement DELETE endpoint)
 * @param {number} importReceiptId - ID phi·∫øu nh·∫≠p c·∫ßn x√≥a
 * @returns {Promise<Object>} - ApiResponse ch·ª©a th√¥ng b√°o th√†nh c√¥ng
 */
export const deleteImportReceipt = async (importReceiptId) => {
  try {
    if (!importReceiptId) {
      throw new Error('ID phi·∫øu nh·∫≠p kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
    }

    const response = await api.delete(`${API_CONFIG.ENDPOINTS.IMPORT_RECEIPTS.DELETE}/${importReceiptId}`);
    return {
      success: true,
      message: response.data.message,
      code: response.data.code
    };
  } catch (error) {
    console.error('L·ªói deleteImportReceipt:', error);
    
    if (error.response?.status === 404) {
      return {
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y phi·∫øu nh·∫≠p c·∫ßn x√≥a',
        error: error.response.data
      };
    }

    if (error.response?.status === 403) {
      return {
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a phi·∫øu nh·∫≠p h√†ng',
        error: error.response.data
      };
    }

    return {
      success: false,
      message: error.response?.data?.message || 'Kh√¥ng th·ªÉ x√≥a phi·∫øu nh·∫≠p h√†ng',
      error: error.response?.data || error.message
    };
  }
};

/**
 * Helper function ƒë·ªÉ format request cho t·∫°o phi·∫øu nh·∫≠p
 * H·ªó tr·ª£ c·∫£ single product v√† multiple products
 * @param {Object} params
 * @param {number} [params.productId] - ID s·∫£n ph·∫©m (cho single product - backward compatibility)
 * @param {number} [params.quantity] - S·ªë l∆∞·ª£ng nh·∫≠p (cho single product - backward compatibility)
 * @param {Array} [params.importDetails] - Danh s√°ch chi ti·∫øt nh·∫≠p (cho multiple products)
 * @param {string} params.date - Ng√†y nh·∫≠p (optional, default = today)
 * @returns {Object} - CreateImportReceiptRequest
 */
export const formatCreateImportReceiptRequest = (params) => {
  const { productId, quantity, importDetails, date } = params;
  
  // N·∫øu c√≥ importDetails (multiple products), tr·∫£ v·ªÅ format m·ªõi
  if (importDetails && Array.isArray(importDetails) && importDetails.length > 0) {
    return {
      createDate: date || new Date().toISOString().split('T')[0],
      importDetails: importDetails.map(item => ({
        productID: item.productId || item.productID,
        quantityImport: item.quantity || item.quantityImport
      }))
    };
  }
  
  // N·∫øu kh√¥ng c√≥ importDetails, s·ª≠ d·ª•ng format c≈© cho single product (backward compatibility)
  return {
    createDate: date || new Date().toISOString().split('T')[0],
    productID: productId,
    quantityImport: quantity
  };
};

/**
 * Helper function ƒë·ªÉ format request cho c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
 * @param {number} importReceiptId - ID phi·∫øu nh·∫≠p
 * @param {number} quantityImport - S·ªë l∆∞·ª£ng nh·∫≠p m·ªõi
 * @returns {Object} - UpdateImportReceiptRequest
 */
export const formatUpdateQuantityRequest = (importReceiptId, quantityImport) => {
  return {
    importReceiptId,
    quantityImport
  };
}; 