const BASE_URL = 'http://localhost:8080';

// Helper function to get authorization headers
const getAuthHeaders = () => {
  const token = localStorage.getItem('authToken') || localStorage.getItem('token');
  return {
    'Content-Type': 'application/json',
    ...(token && { 'Authorization': `Bearer ${token}` })
  };
};

// ============ PRODUCT MANAGEMENT FUNCTIONS ============

export const getAllProducts = async () => {
  try {
    const response = await fetch(`${BASE_URL}/api/products`, {
      method: 'GET',
      headers: getAuthHeaders(),
    });
    if (!response.ok) throw new Error(`Kh√¥ng th·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m: ${response.status}`);
    const result = await response.json();
    return { status: result.status, data: result.data || [], message: result.message };
  } catch (err) {
    console.error('L·ªói getAllProducts:', err.message);
    throw err;
  }
};

export const getProductById = async (productId) => {
  try {
    const response = await fetch(`${BASE_URL}/api/products/${productId}`, {
      method: 'GET',
      headers: getAuthHeaders(),
    });
    if (!response.ok) throw new Error(`Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt s·∫£n ph·∫©m: ${response.status}`);
    const result = await response.json();
    return { status: result.status, data: result.data, message: result.message };
  } catch (err) {
    console.error('L·ªói getProductById:', err.message);
    throw err;
  }
};

// ============ NEW IMPROVED ADD PRODUCT FUNCTION ============
/**
 * Th√™m s·∫£n ph·∫©m m·ªõi v·ªõi t·ª± ƒë·ªông t√≠nh exportPrice t·ª´ export_price_ratio
 * @param {Object} productData - {productName: string, unitName: string, importPrice: number}
 * @returns {Promise<Object>} - Response t·ª´ API
 */
export const addProduct = async (productData) => {
  try {
    // Validate input data
    if (!productData.productName || !productData.unitName || !productData.importPrice) {
      throw new Error('Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: productName, unitName, importPrice');
    }

    if (productData.importPrice <= 0) {
      throw new Error('Gi√° nh·∫≠p ph·∫£i l·ªõn h∆°n 0');
    }

    // G·ª≠i request v·ªõi format JSON theo y√™u c·∫ßu
    const response = await fetch(`${BASE_URL}/api/products`, {
      method: 'POST',
      headers: getAuthHeaders(),
      body: JSON.stringify({
        productName: productData.productName,
        unitName: productData.unitName,
        importPrice: productData.importPrice
      }),
    });

    if (!response.ok) {
      let errorData = null;
      try {
        errorData = await response.json();
      } catch (parseError) {
        // If response is not JSON, try to get text
        const errorText = await response.text();
        throw new Error(`Kh√¥ng th·ªÉ t·∫°o s·∫£n ph·∫©m: ${response.status} - ${errorText || response.statusText}`);
      }
      
      // Handle specific backend error cases
      if (response.status === 400 && errorData?.message) {
        if (errorData.message.includes('ƒë√£ t·ªìn t·∫°i') || 
            errorData.message.includes('PRODUCT_ALREADY_EXISTS')) {
          // Extract product name and unit from error message for better UX
          throw new Error(errorData.message);
        }
      }
      
      throw new Error(`Kh√¥ng th·ªÉ t·∫°o s·∫£n ph·∫©m: ${response.status} - ${errorData?.message || response.statusText}`);
    }
    
    const result = await response.json();
    return { 
      status: result.status || 'success', 
      data: result.data, 
      message: result.message || 'Th√™m s·∫£n ph·∫©m th√†nh c√¥ng' 
    };
  } catch (err) {
    console.error('L·ªói trong addProduct:', err.message);
    throw err;
  }
};

// ============ PARAMETER FUNCTIONS ============
/**
 * L·∫•y t·ª∑ l·ªá gi√° xu·∫•t t·ª´ Parameter
 * @returns {Promise<number>} - T·ª∑ l·ªá export price ratio (m·∫∑c ƒë·ªãnh 1.02)
 */
export const getExportPriceRatio = async () => {
  try {
    const response = await fetch(`${BASE_URL}/api/parameters?paramKey=export_price_ratio`, {
      method: 'GET',
      headers: getAuthHeaders(),
    });
    
    if (!response.ok) {
      console.warn('Kh√¥ng th·ªÉ l·∫•y export_price_ratio, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh 1.02');
      return 1.02;
    }
    
    const result = await response.json();
    // Update theo response format: {code: 200, data: {paramValue: "2"}}
    const ratio = parseFloat(result.data?.paramValue || result.data?.param_value || '1.02');
    console.log('üîç Loaded export price ratio from API:', ratio);
    return isNaN(ratio) ? 1.02 : ratio;
  } catch (err) {
    console.warn('L·ªói khi l·∫•y export_price_ratio:', err.message, '- S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh 1.02');
    return 1.02;
  }
};

/**
 * T√≠nh to√°n export price d·ª±a v√†o import price v√† ratio
 * @param {number} importPrice - Gi√° nh·∫≠p
 * @param {number} ratio - T·ª∑ l·ªá export price ratio (optional, s·∫Ω fetch t·ª´ API n·∫øu kh√¥ng c√≥)
 * @returns {Promise<number>} - Gi√° xu·∫•t ƒë√£ t√≠nh
 */
export const calculateExportPrice = async (importPrice, ratio = null) => {
  try {
    const exportRatio = ratio || await getExportPriceRatio();
    return Math.round(importPrice * exportRatio);
  } catch (err) {
    console.error('L·ªói khi t√≠nh export price:', err.message);
    return Math.round(importPrice * 1.02); // Fallback to default 1.02
  }
};

// ============ LEGACY FUNCTIONS (GI·ªÆ L·∫†I T∆Ø∆†NG TH√çCH) ============

export const createProduct = async (productData) => {
  try {
    const response = await fetch(`${BASE_URL}/api/products`, {
      method: 'POST',
      headers: getAuthHeaders(),
      body: JSON.stringify(productData),
    });
    if (!response.ok) {
      throw new Error(`Kh√¥ng th·ªÉ t·∫°o s·∫£n ph·∫©m: ${response.status} - ${response.statusText}`);
    }
    return await response.json();
  } catch (err) {
    console.error('L·ªói trong createProduct:', err.message);
    throw err;
  }
};

export const updateProduct = async (productId, productData) => {
  try {
    const response = await fetch(`${BASE_URL}/api/products`, {
      method: 'PUT',
      headers: getAuthHeaders(),
      body: JSON.stringify(productData),
    });
    if (!response.ok) {
      throw new Error(`Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·∫£n ph·∫©m: ${response.status} - ${response.statusText}`);
    }
    return await response.json();
  } catch (err) {
    console.error('L·ªói trong updateProduct:', err.message);
    throw err;
  }
};

export const deleteProduct = async (productId) => {
  try {
      const response = await fetch(`${BASE_URL}/api/products?productId=${productId}`, {
      method: 'DELETE',
      headers: getAuthHeaders(),
    });
    if (!response.ok) {
      throw new Error(`Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m: ${response.status} - ${response.statusText}`);
    }
    return await response.json();
  } catch (err) {
    console.error('L·ªói trong deleteProduct:', err.message);
    throw err;
  }
};

// ============ INVENTORY MANAGEMENT FUNCTIONS ============

export const increaseInventory = async (productId, quantity) => {
  try {
    const response = await fetch(`${BASE_URL}/api/products/increaseInventory?productId=${productId}&quantity=${quantity}`, {
      method: 'PUT',
      headers: getAuthHeaders(),
    });
    if (!response.ok) {
      throw new Error(`Kh√¥ng th·ªÉ tƒÉng t·ªìn kho: ${response.status} - ${response.statusText}`);
    }
    return await response.json();
  } catch (err) {
    console.error('L·ªói trong increaseInventory:', err.message);
    throw err;
  }
};

export const decreaseInventory = async (productId, quantity) => {
  try {
    const response = await fetch(`${BASE_URL}/api/products/decreaseInventory?productId=${productId}&quantity=${quantity}`, {
      method: 'PUT',
      headers: getAuthHeaders(),
    });
    if (!response.ok) {
      throw new Error(`Kh√¥ng th·ªÉ gi·∫£m t·ªìn kho: ${response.status} - ${response.statusText}`);
    }
    return await response.json();
  } catch (err) {
    console.error('L·ªói trong decreaseInventory:', err.message);
    throw err;
  }
};

export const getInventoryQuantity = async (productName) => {
  try {
    const response = await fetch(`${BASE_URL}/api/products/getInventoryQuantity?productName=${encodeURIComponent(productName)}`, {
      method: 'GET',
      headers: getAuthHeaders(),
    });
    if (!response.ok) {
      throw new Error(`Kh√¥ng th·ªÉ l·∫•y s·ªë l∆∞·ª£ng t·ªìn kho: ${response.status} - ${response.statusText}`);
    }
    return await response.json();
  } catch (err) {
    console.error('L·ªói trong getInventoryQuantity:', err.message);
    throw err;
  }
};

